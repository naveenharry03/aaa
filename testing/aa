import os
import re  # For regex-based heading detection
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
import pypandoc

def get_all_md_files(path):
    """Fetch all markdown files from the directory."""
    md_files = []
    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith(".md"):
                md_files.append(os.path.join(root, file))
    return md_files

def create_cover_page(doc):
    """Creates a cover page with a title."""
    cover = doc.add_paragraph()
    cover.alignment = WD_ALIGN_PARAGRAPH.CENTER

    run = cover.add_run("Code Analyzer Documentation")
    run.bold = True
    run.font.size = Pt(28)
    run.font.color.rgb = RGBColor(0, 51, 102)  # Dark blue

    # Add a page break after the cover page
    doc.add_page_break()

def add_toc_placeholder(doc):
    """Adds a TOC placeholder. Needs to be updated in Word."""
    toc_paragraph = doc.add_paragraph()
    toc_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    run = toc_paragraph.add_run("Table of Contents")
    run.bold = True
    run.font.size = Pt(24)

    # Add the TOC field placeholder
    toc_field = OxmlElement('w:fldSimple')
    toc_field.set(qn('w:instr'), 'TOC \\o "1-3" \\h \\z \\u')
    toc_paragraph._element.append(toc_field)

    # Add a page break after the TOC
    doc.add_page_break()

def convert_md_to_docx(md_files, temp_file):
    """Converts markdown files to a temporary DOCX."""
    pypandoc.convert_file(md_files, 'docx', outputfile=temp_file)

def insert_markdown_content(doc, temp_file):
    """Inserts converted markdown content into the document."""
    temp_doc = Document(temp_file)

    # Append paragraphs from temp_doc to the main doc
    for paragraph in temp_doc.paragraphs:
        new_para = doc.add_paragraph(paragraph.text)
        new_para.style = paragraph.style

def map_headings(doc):
    """Detects custom headings and maps them to Word styles."""
    heading_pattern = re.compile(r"##\s*(functionDef|class)\s+\w+", re.IGNORECASE)

    for paragraph in doc.paragraphs:
        # If paragraph matches the heading pattern, apply Heading 2 style
        if heading_pattern.match(paragraph.text):
            paragraph.style = doc.styles["Heading 2"]

def handle_code_snippets(doc):
    """Detects and formats code snippets."""
    for paragraph in doc.paragraphs:
        # If paragraph starts with specific characters, treat it as code
        if any(paragraph.text.lstrip().startswith(ch) for ch in ['{', '[', '(', '"', "'"]):
            paragraph.style = doc.styles['No Spacing']
            paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT
            run = paragraph.runs[0]
            run.font.name = 'Courier New'  # Monospaced font

def generate_docs(folder, repo):
    """Generate a DOCX document with a cover page, TOC, and markdown content."""
    output_file = folder / f"{os.path.basename(repo)}.docx"
    temp_file = "temp_output.docx"

    # Fetch markdown files
    md_files = get_all_md_files(folder)

    if md_files:
        # Convert markdown to a temporary DOCX
        convert_md_to_docx(md_files, temp_file)

        # Create a new DOCX document
        doc = Document()

        # Add cover page and TOC at the beginning
        create_cover_page(doc)
        add_toc_placeholder(doc)

        # Insert the converted markdown content
        insert_markdown_content(doc, temp_file)

        # Map custom headings (functions, classes) to Word styles
        map_headings(doc)

        # Handle code snippets formatting
        handle_code_snippets(doc)

        # Save the final DOCX
        doc.save(output_file)

        # Clean up temporary file
        os.remove(temp_file)

        print(f"Document saved at: {output_file}")

# Example usage:
# generate_docs(folder="path_to_folder", repo="your_repo_name")
