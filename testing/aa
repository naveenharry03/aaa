import os
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
import pypandoc
from .log import logger

def get_all_md_files(path):
    """Fetch all markdown files from the directory."""
    md_files = []
    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith(".md"):
                md_files.append(os.path.join(root, file))
    return md_files

def create_cover_page(doc):
    """Creates a cover page with the title."""
    cover = doc.add_paragraph()
    cover.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = cover.add_run("Code Analyzer Documentation\n")
    run.bold = True
    run.font.size = Pt(24)
    run.font.color.rgb = RGBColor(0, 51, 102)  # Dark blue color

    # Add a page break after the cover page
    doc.add_page_break()

def add_toc(doc):
    """Inserts a Table of Contents (TOC)."""
    toc_paragraph = doc.add_paragraph()
    toc_run = toc_paragraph.add_run("Table of Contents\n")
    toc_run.bold = True
    toc_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Add TOC field
    field = OxmlElement('w:fldSimple')
    field.set(qn('w:instr'), 'TOC \\o "1-3" \\h \\z \\u')  # TOC for levels 1-3
    toc_paragraph._element.append(field)

    # Add a page break after the TOC
    doc.add_page_break()

def add_page_break_before_headings(doc):
    """Inserts page breaks before every heading."""
    for paragraph in doc.paragraphs:
        if paragraph.style.name.startswith("Heading"):
            paragraph.insert_paragraph_before().add_run().add_break()

def handle_code_snippets(doc):
    """Detects and formats code blocks differently."""
    for paragraph in doc.paragraphs:
        # Heuristic: Detect code-like content (JSON, YAML, or indentation patterns)
        if any(paragraph.text.lstrip().startswith(ch) for ch in ['{', '[', '<', '"', "'"]):
            paragraph.style = doc.styles['No Spacing']  # No spacing style for code
            paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT
            paragraph.font.name = 'Courier New'  # Monospaced font for code

def set_styles(doc):
    """Defines custom styles for headings and normal text."""
    for style in doc.styles:
        if style.type == 2 and style.name.startswith('Heading'):  # For all Heading styles
            style.font.name = 'Arial'
            style.font.size = Pt(16 if '1' in style.name else 14)  # Adjust size dynamically
            style.font.color.rgb = RGBColor(0, 0, 139)  # Dark blue for all headings

    # Customize the 'Normal' style for regular text
    normal_style = doc.styles['Normal']
    normal_style.font.name = 'Times New Roman'
    normal_style.font.size = Pt(11)

def generate_docs(folder, repo):
    """Generate DOCX with markdown content and beautify it."""
    output_file = folder / f"{os.path.basename(repo)}.docx"
    logger.info(f"Scanning markdown files in: {folder}")
    md_files = get_all_md_files(folder)
    logger.info(f"Found {len(md_files)} markdown files")

    if md_files:
        # Convert markdown to DOCX
        pypandoc.convert_file(md_files, 'docx', outputfile=str(output_file))

        # Load the DOCX to apply further beautification
        doc = Document(output_file)

        # Apply formatting and beautification
        create_cover_page(doc)
        add_toc(doc)
        set_styles(doc)
        handle_code_snippets(doc)
        add_page_break_before_headings(doc)

        # Save the beautified DOCX
        doc.save(output_file)
        logger.info(f"Beautified DOCX saved at: {output_file}")

# Example usage:
# generate_docs(folder="path_to_folder", repo="your_repo_name")
