from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.shared import Pt

def create_cover_page(doc, title, author):
    # Add title
    title_paragraph = doc.add_paragraph()
    title_run = title_paragraph.add_run(title)
    title_run.font.size = Pt(24)
    title_run.font.name = 'Arial'
    title_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Add author
    author_paragraph = doc.add_paragraph()
    author_run = author_paragraph.add_run(author)
    author_run.font.size = Pt(18)
    author_run.font.name = 'Arial'
    author_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Add a page break after the cover page
    doc.add_page_break()

def add_table_of_contents(doc):
    # Add a heading for the TOC
    toc_heading = doc.add_heading('Table of Contents', level=1)
    toc_heading.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Add TOC field
    paragraph = doc.add_paragraph()
    run = paragraph.add_run()
    fldChar = OxmlElement('w:fldChar')  # creates a new element
    fldChar.set(qn('w:fldCharType'), 'begin')  # sets attribute on element
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')  # sets attribute on element
    instrText.text = 'TOC \\o "1-3" \\h \\z \\u'  # change 1-3 depending on heading levels you need

    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'separate')
    fldChar3 = OxmlElement('w:t')
    fldChar3.text = "Right-click to update field."

    fldChar4 = OxmlElement('w:fldChar')
    fldChar4.set(qn('w:fldCharType'), 'end')

    run._r.append(fldChar)
    run._r.append(instrText)
    run._r.append(fldChar2)
    run._r.append(fldChar3)
    run._r.append(fldChar4)

    # Add a page break after the TOC
    doc.add_page_break()

def merge_md_to_docx(md_files, output_file, title, author):
    doc = Document()

    # Create cover page
    create_cover_page(doc, title, author)

    # Add table of contents
    add_table_of_contents(doc)

    # Append content from markdown files
    for md_file in md_files:
        with open(md_file, 'r', encoding='utf-8') as file:
            content = file.read()
            doc.add_paragraph(content)

    # Save the document
    doc.save(output_file)

# Example usage
md_files = ['file1.md', 'file2.md']  # List of markdown files
output_file = 'output.docx'
title = 'Document Title'
author = 'Author Name'

merge_md_to_docx(md_files, output_file, title, author)
