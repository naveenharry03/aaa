import os
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import pypandoc

# Set the path for the markdown files
TEMP_MD_PATH = r"C:\Users\naveen.jagadeesan\Desktop\Naveen_repoagent\temp_files"

def get_all_md_files(path):
    """Retrieve all markdown files from the given path."""
    md_files = []
    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith(".md"):
                md_files.append(os.path.join(root, file))
    return md_files

def add_cover_page_and_toc(doc, title, author):
    """Add a cover page and Table of Contents (TOC) at the start of the document."""
    # --- Cover Page ---
    title_paragraph = doc.add_paragraph()
    title_run = title_paragraph.add_run(title)
    title_run.bold = True
    title_run.font.size = Pt(28)
    title_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Add space and author information
    doc.add_paragraph().add_run("\n")
    author_paragraph = doc.add_paragraph()
    author_run = author_paragraph.add_run(f"Author: {author}")
    author_run.font.size = Pt(16)
    author_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Page break after cover page
    doc.add_page_break()

    # --- TOC ---
    toc_paragraph = doc.add_paragraph()
    toc_run = toc_paragraph.add_run("Table of Contents")
    toc_run.bold = True
    toc_run.font.size = Pt(20)
    toc_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Add TOC field
    toc_field_paragraph = doc.add_paragraph()
    fld_simple = OxmlElement('w:fldSimple')
    fld_simple.set(qn('w:instr'), 'TOC \\o "1-3" \\h \\z \\u')
    toc_field_paragraph._element.append(fld_simple)

    # Page break after TOC
    doc.add_page_break()

def add_markdown_content(doc, md_files):
    """Convert markdown files and add their content directly into the DOCX."""
    for md_file in md_files:
        # Convert each markdown file to a string with pypandoc
        md_content = pypandoc.convert_file(md_file, 'plain')  # Convert to plain text

        # Add a heading for the file name
        heading = os.path.basename(md_file).replace(".md", "")
        doc.add_heading(heading, level=2)

        # Add the converted markdown content
        doc.add_paragraph(md_content)

        # Add a page break after each file
        doc.add_page_break()

def generate_docs(folder):
    """Main function to generate the final DOCX with cover page, TOC, and markdown content."""
    md_files = get_all_md_files(folder)
    if not md_files:
        print("No markdown files found in the specified folder.")
        return

    # Create a new document and add cover page and TOC
    doc = Document()
    add_cover_page_and_toc(doc, "My Project Documentation", "Naveen Jagadeesan")

    # Add markdown content starting on the third page
    add_markdown_content(doc, md_files)

    # Save the final DOCX
    final_output_path = os.path.join(folder, "final_output.docx")
    doc.save(final_output_path)

    print(f"Final DOCX saved at: {final_output_path}")

# --- Execute the function ---
if __name__ == "__main__":
    generate_docs(TEMP_MD_PATH)
