import os
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
import pypandoc
from .log import logger

def get_all_md_files(path):
    """Fetch all markdown files from the directory."""
    md_files = []
    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith(".md"):
                md_files.append(os.path.join(root, file))
    return md_files

def create_cover_page(doc):
    """Creates a cover page with a title."""
    cover = doc.add_paragraph()
    cover.alignment = WD_ALIGN_PARAGRAPH.CENTER

    run = cover.add_run("Code Analyzer Documentation")
    run.bold = True
    run.font.size = Pt(28)
    run.font.color.rgb = RGBColor(0, 51, 102)  # Dark blue color

    # Add a page break after the cover page
    doc.add_page_break()

def add_toc_placeholder(doc):
    """Adds a TOC placeholder. It needs to be updated in Word."""
    toc_paragraph = doc.add_paragraph()
    toc_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    run = toc_paragraph.add_run("Table of Contents")
    run.bold = True
    run.font.size = Pt(24)

    # Add TOC field placeholder
    toc_field = OxmlElement('w:fldSimple')
    toc_field.set(qn('w:instr'), 'TOC \\o "1-3" \\h \\z \\u')
    toc_paragraph._element.append(toc_field)

    # Add a page break after the TOC
    doc.add_page_break()

def insert_markdown_content(doc, md_files):
    """Converts markdown files to DOCX and inserts them into the document."""
    temp_file = "temp_output.docx"  # Temporary DOCX file

    # Convert markdown to DOCX using pypandoc
    pypandoc.convert_file(md_files, 'docx', outputfile=temp_file)

    # Load the converted DOCX content
    temp_doc = Document(temp_file)

    # Append each paragraph from the temp_doc to the main doc
    for paragraph in temp_doc.paragraphs:
        new_para = doc.add_paragraph(paragraph.text)
        new_para.style = paragraph.style

    # Remove the temporary file
    os.remove(temp_file)

def handle_code_snippets(doc):
    """Detects and formats code snippets differently."""
    for paragraph in doc.paragraphs:
        if any(paragraph.text.lstrip().startswith(ch) for ch in ['{', '[', '<', '"', "'"]):
            paragraph.style = doc.styles['No Spacing']
            paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT
            run = paragraph.runs[0]
            run.font.name = 'Courier New'  # Monospaced font

def add_page_breaks_before_headings(doc):
    """Inserts page breaks before every heading."""
    for paragraph in doc.paragraphs:
        if paragraph.style.name.startswith("Heading"):
            paragraph.insert_paragraph_before().add_run().add_break()

def set_styles(doc):
    """Applies custom styles to headings and text."""
    for style in doc.styles:
        if style.type == 2 and style.name.startswith('Heading'):
            style.font.name = 'Arial'
            style.font.size = Pt(16 if '1' in style.name else 14)
            style.font.color.rgb = RGBColor(0, 0, 139)  # Dark blue

    normal_style = doc.styles['Normal']
    normal_style.font.name = 'Times New Roman'
    normal_style.font.size = Pt(11)

def generate_docs(folder, repo):
    """Generate a DOCX document with proper formatting and content."""
    output_file = folder / f"{os.path.basename(repo)}.docx"
    logger.info(f"Scanning markdown files in: {folder}")
    md_files = get_all_md_files(folder)
    logger.info(f"Found {len(md_files)} markdown files")

    if md_files:
        # Start a new DOCX document
        doc = Document()

        # Create the cover page and TOC first
        create_cover_page(doc)
        add_toc_placeholder(doc)

        # Insert markdown content after the TOC
        insert_markdown_content(doc, md_files)

        # Apply formatting and beautification
        set_styles(doc)
        handle_code_snippets(doc)
        add_page_breaks_before_headings(doc)

        # Save the final document
        doc.save(output_file)
        logger.info(f"Beautified DOCX saved at: {output_file}")

# Example usage:
# generate_docs(folder="path_to_folder", repo="your_repo_name")
