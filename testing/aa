import os
from markdown import markdown
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.shared import Pt, RGBColor
from .log import logger
import pypandoc

def get_all_md_files(path):
    md_files = []
    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith(".md"):
                md_files.append(os.path.join(root, file))
    return md_files

def add_toc(doc):
    # Add a TOC at the beginning of the document
    paragraph = doc.add_paragraph()
    run = paragraph.add_run()
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'begin')
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = 'TOC \\o "1-3" \\h \\z \\u'
    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'separate')
    fldChar3 = OxmlElement('w:fldChar')
    fldChar3.set(qn('w:fldCharType'), 'end')
    run._r.append(fldChar)
    run._r.append(instrText)
    run._r.append(fldChar2)
    run._r.append(fldChar3)

def format_document(doc):
    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            run.font.size = Pt(12)
            run.font.name = 'Arial'
            run.font.color.rgb = RGBColor(0, 0, 0)
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        paragraph.space_after = Pt(12)
        if paragraph.style.name.startswith('Heading 1'):
            paragraph.paragraph_format.page_break_before = True

def generate_docs(folder, repo):
    output_file = folder / f"{os.path.basename(repo)}.docx"
    logger.info(f"Scanning md files in: {folder}")
    md_files = get_all_md_files(folder)
    logger.info(f"Found {len(md_files)} md files")
    if len(md_files) > 0:
        pypandoc.convert_file(md_files, 'docx', outputfile=str(output_file))
        
        # Open the generated docx file
        doc = Document(output_file)
        
        # Add TOC
        add_toc(doc)
        
        # Format the document
        format_document(doc)
        
        # Save the formatted document
        doc.save(output_file)
