def update_tasklist(self, target_dir_path: str | Path, csv_file: str | Path):
        """
        Updates the tasklist.csv file with token details from the project_hierarchy.json file.

        Args:
            target_dir_path (str | Path): Path to the target directory containing project_hierarchy.json.
            csv_file (str | Path): Path to the tasklist.csv file.
        """
        project_hierarchy_json_path = os.path.join(target_dir_path, "project_hierarchy.json")

        # Check if the JSON file exists
        if not os.path.exists(project_hierarchy_json_path):
            logger.error(f"File not found: {project_hierarchy_json_path}")
            return

        with open(project_hierarchy_json_path, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError as e:
                logger.error(f"Error decoding JSON: {e}")
                return

        # Debugging: Check the structure of the data
        logger.debug(f"Loaded JSON data: {data}")

        # Read the existing CSV data
        with open(csv_file, 'r', newline='', encoding='utf-8') as infile:
            reader = csv.reader(infile)
            rows = list(reader)

        # Update the header
        header = rows[0]
        header.extend(["prompt_template", "prompt_with_data", "model_input", "model_output", "model_total"])

        # Update the rows with new data
        updated_rows = [header]
        for row in rows[1:]:
            # Extract path from the row
            path = row[2]
            path_parts = path.split('/')
            file_name = path_parts[0]
            class_or_func_name = path_parts[1]
            func_name = path_parts[2] if len(path_parts) > 2 else None

            # Find the matching element in the JSON data
            if file_name in data:
                for item in data[file_name]:
                    if item['name'] == class_or_func_name and (func_name is None or item['name'] == func_name):
                        token_details = item.get('token_Details', {})
                        row.extend([
                            token_details.get("prompt_template"),
                            token_details.get("prompt_with_data"),
                            token_details.get("model_input"),
                            token_details.get("model_output"),
                            token_details.get("model_total"),
                        ])
                        break

            updated_rows.append(row)

        # Write the updated data back to the same CSV file
        with open(csv_file, 'w', newline='', encoding='utf-8') as outfile:
            writer = csv.writer(outfile)
            writer.writerows(updated_rows)
