import os
import json
import csv
from pathlib import Path

def update_tasklist(checkpoint_dir_path: str | Path, csv_file: str | Path):
    """
    Updates the tasklist.csv file with token details from the project_hierarchy.json file.

    Args:
        checkpoint_dir_path (str | Path): Path to the checkpoint directory containing project_hierarchy.json.
        csv_file (str | Path): Path to the tasklist.csv file.
    """
    project_hierarchy_json_path = os.path.join(checkpoint_dir_path, "project_hierarchy.json")

    with open(project_hierarchy_json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    # Read the existing CSV data
    with open(csv_file, 'r', newline='', encoding='utf-8') as infile:
        reader = csv.reader(infile)
        rows = list(reader)

    # Update the header
    header = rows[0]
    header.extend(["prompt_template", "prompt_with_data", "model_input", "model_output", "model_total"])

    # Update the rows with new data
    updated_rows = [header]
    for row in rows[1:]:
        # Extract path from the row
        path = row[2]
        
        # Find the matching element in the JSON data
        for item in data:
            if item['type'] + '/' + item['name'] == path:
                token_details = item.get('token_Details', {})
                row.extend([
                    token_details.get("prompt_template"),
                    token_details.get("prompt_with_data"),
                    token_details.get("model_input"),
                    token_details.get("model_output"),
                    token_details.get("model_total"),
                ])
                break

        updated_rows.append(row)

    # Write the updated data back to the same CSV file
    with open(csv_file, 'w', newline='', encoding='utf-8') as outfile:
        writer = csv.writer(outfile)
        writer.writerows(updated_rows)

# Example usage:
checkpoint_dir_path = Path("./checkpoint_dir")
csv_file = Path("./tasklist.csv")
update_tasklist(checkpoint_dir_path, csv_file)
