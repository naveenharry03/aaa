import csv

# Sample token_details dictionary
token_details = {'prompt_template': 444, 'promptdata': 1563, 'model_input': 125}

# Function to update the CSV file
def update_csv_with_token_details(csv_file, doc_item):
    # Read the existing CSV data
    with open(csv_file, 'r', newline='', encoding='utf-8') as infile:
        reader = csv.reader(infile)
        rows = list(reader)

    # Update the header with new columns
    header = rows[0]
    header.extend(["prompt_template", "promptdata", "model_input"])

    # Update the rows with new data
    updated_rows = [header]
    for row in rows[1:]:
        # Extract path from the row
        path = row[3]  # Assuming the path is in the 4th column (index 3)

        # Compare with doc_item.get_full_name()
        if path == doc_item.get_full_name():
            row.extend([
                token_details.get("prompt_template"),
                token_details.get("promptdata"),
                token_details.get("model_input"),
            ])

        updated_rows.append(row)

    # Write the updated data back to the same CSV file
    with open(csv_file, 'w', newline='', encoding='utf-8') as outfile:
        writer = csv.writer(outfile)
        writer.writerows(updated_rows)

# Example usage
class DocItem:
    def get_full_name(self):
        return "example/path/to/file"

doc_item = DocItem()
update_csv_with_token_details('tasklist.csv', doc_item)
