"%Y-%m-%d %H:%M:%S"
import csv

# Sample token_details dictionary
token_details = {'prompt_template': 444, 'promptdata': 1563, 'model_input': 125}

# Function to update the CSV file
def update_csv_with_token_details(csv_file, doc_item):
    # Read the existing CSV data
    with open(csv_file, 'r', newline='', encoding='utf-8') as infile:
        reader = csv.reader(infile)
        rows = list(reader)

    # Update the header with new columns if they don't already exist
    header = rows[0]
    new_columns = ["prompt_template", "promptdata", "model_input"]
    for col in new_columns:
        if col not in header:
            header.append(col)

    # Create a mapping from column names to indices
    col_indices = {col: idx for idx, col in enumerate(header)}

    # Update the rows with new data
    updated_rows = [header]
    for row in rows[1:]:
        # Extract path from the row
        path = row[3]  # Assuming the path is in the 4th column (index 3)

        # Compare with doc_item.get_full_name()
        if path == doc_item.get_full_name():
            # Ensure the row has enough columns to accommodate the new data
            while len(row) < len(header):
                row.append('')

            # Update the row with new data
            row[col_indices["prompt_template"]] = token_details.get("prompt_template")
            row[col_indices["promptdata"]] = token_details.get("promptdata")
            row[col_indices["model_input"]] = token_details.get("model_input")

        updated_rows.append(row)

    # Write the updated data back to the same CSV file
    with open(csv_file, 'w', newline='', encoding='utf-8') as outfile:
        writer = csv.writer(outfile)
        writer.writerows(updated_rows)

# Example usage
class DocItem:
    def get_full_name(self):
        return "example/path/to/file"

doc_item = DocItem()
update_csv_with_token_details('tasklist.csv', doc_item)


def print_task_list(self, task_dict: Dict[int, Dict[str, Any]]):
    '''Prints and updates the task list.'''
    csv_file_path = 'task_list.csv'

    # Check if the file exists. If not, create it with the header.
    if not Path(csv_file_path).exists():
        with open(csv_file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["task_id", "Doc Generation Reason", "Path", "dependency"])

    # Read existing rows from the CSV file
    existing_rows = []
    with open(csv_file_path, mode='r', newline='') as file:
        reader = csv.reader(file)
        next(reader) # Skip the header row
        existing_rows = list(reader)

    # Update existing_rows with new information from task_dict
    for task_id, task_info in task_dict.items():
        # Check if the task_id is already present in the existing_rows
        found = False
        for i, row in enumerate(existing_rows):
            if int(row[0]) == task_id:
                existing_rows[i] = [
                    task_id, 
                    task_info['item_status'].name, 
                    task_info['full_name'],
                    ",".join([str(d_task_id) for d_task_id in task_info['dependencies']]) if 'dependencies' in task_info and task_info['dependencies'] else "None", 
                ]
                found = True
                break

        # If the task_id is not found, add a new row
        if not found:
            existing_rows.append([
                task_id,
                task_info['item_status'].name,
                task_info['full_name'],
                ",".join([str(d_task_id) for d_task_id in task_info['dependencies']]) if 'dependencies' in task_info and task_info['dependencies'] else "None"
            ])

    # Write the updated rows back to the CSV file
    with open(csv_file_path, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["task_id", "Doc Generation Reason", "Path", "dependency"])
        writer.writerows(existing_rows)
